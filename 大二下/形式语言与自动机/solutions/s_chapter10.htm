<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0060)http://learn.tsinghua.edu.cn/homepage/S01122/s_chapter10.htm -->
<!-- saved from url=(0054)http://www-db.stanford.edu/~ullman/ialcsols/sol10.html --><HTML 
xmlns="http://www.w3.org/TR/REC-html40" xmlns:v = 
"urn:schemas-microsoft-com:vml" xmlns:o = 
"urn:schemas-microsoft-com:office:office" xmlns:w = 
"urn:schemas-microsoft-com:office:word"><HEAD><TITLE>Introduction to Automata Theory, Languages, and Computation: Solutions for Chapter 10</TITLE>
<META http-equiv=Content-Type content="text/html; charset=GB2312">
<META content=Word.Document name=ProgId>
<META content="MSHTML 6.00.2800.1264" name=GENERATOR>
<META content="Microsoft Word 9" name=Originator><LINK 
href="./s_chapter10.files/filelist.xml" rel=File-List><!--[if gte mso 9]><xml>
 <o:DocumentProperties>
  <o:Author>wang</o:Author>
  <o:Template>Normal</o:Template>
  <o:LastAuthor>wang</o:LastAuthor>
  <o:Revision>5</o:Revision>
  <o:TotalTime>3</o:TotalTime>
  <o:Created>2002-01-23T01:38:00Z</o:Created>
  <o:LastSaved>2002-01-23T04:51:00Z</o:LastSaved>
  <o:Pages>4</o:Pages>
  <o:Words>1330</o:Words>
  <o:Characters>7582</o:Characters>
  <o:Company>wyy</o:Company>
  <o:Lines>63</o:Lines>
  <o:Paragraphs>15</o:Paragraphs>
  <o:CharactersWithSpaces>9311</o:CharactersWithSpaces>
  <o:Version>9.2812</o:Version>
 </o:DocumentProperties>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <w:WordDocument>
  <w:DrawingGridVerticalSpacing>7.8 磅</w:DrawingGridVerticalSpacing>
  <w:Compatibility>
   <w:UseFELayout/>
  </w:Compatibility>
 </w:WordDocument>
</xml><![endif]-->
<STYLE>@font-face {
	font-family: 宋体;
}
@font-face {
	font-family: @宋体;
}
@page  {mso-page-border-surround-header: no; mso-page-border-surround-footer: no; }
@page Section1 {size: 595.3pt 841.9pt; margin: 72.0pt 90.0pt 72.0pt 90.0pt; mso-header-margin: 42.55pt; mso-footer-margin: 49.6pt; mso-paper-source: 0; }
P.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0cm 0cm 0pt; FONT-FAMILY: 宋体; mso-style-parent: ""; mso-pagination: widow-orphan; mso-bidi-font-family: "Times New Roman"
}
LI.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0cm 0cm 0pt; FONT-FAMILY: 宋体; mso-style-parent: ""; mso-pagination: widow-orphan; mso-bidi-font-family: "Times New Roman"
}
DIV.MsoNormal {
	FONT-SIZE: 12pt; MARGIN: 0cm 0cm 0pt; FONT-FAMILY: 宋体; mso-style-parent: ""; mso-pagination: widow-orphan; mso-bidi-font-family: "Times New Roman"
}
A:link {
	COLOR: blue; TEXT-DECORATION: underline; text-underline: single
}
SPAN.MsoHyperlink {
	COLOR: blue; TEXT-DECORATION: underline; text-underline: single
}
A:visited {
	COLOR: blue; TEXT-DECORATION: underline; text-underline: single
}
SPAN.MsoHyperlinkFollowed {
	COLOR: blue; TEXT-DECORATION: underline; text-underline: single
}
P {
	FONT-SIZE: 12pt; MARGIN-LEFT: 0cm; MARGIN-RIGHT: 0cm; FONT-FAMILY: 宋体; mso-pagination: widow-orphan; mso-bidi-font-family: "Times New Roman"; mso-margin-top-alt: auto; mso-margin-bottom-alt: auto
}
DIV.Section1 {
	page: Section1
}
OL {
	MARGIN-BOTTOM: 0cm
}
UL {
	MARGIN-BOTTOM: 0cm
}
</STYLE>
<!--[if gte mso 9]><xml>
 <o:shapedefaults v:ext="edit" spidmax="1027"/>
</xml><![endif]--><!--[if gte mso 9]><xml>
 <o:shapelayout v:ext="edit">
  <o:idmap v:ext="edit" data="1"/>
 </o:shapelayout></xml><![endif]--></HEAD>
<BODY lang=ZH-CN style="tab-interval: 21.0pt" vLink=blue link=blue 
bgColor=#e0f7f0>
<DIV class=Section1>
<DIV align=center>
<TABLE style="mso-cellspacing: 1.5pt; mso-padding-alt: 0cm 0cm 0cm 0cm" 
cellPadding=0 border=0>
  <TBODY>
  <TR>
    <TD 
    style="PADDING-RIGHT: 0.75pt; PADDING-LEFT: 0.75pt; PADDING-BOTTOM: 0.75pt; PADDING-TOP: 0.75pt">
      <P class=MsoNormal><![if !supportEmptyParas]><![endif]>&nbsp;<SPAN 
      lang=EN-US><o:p></o:p></SPAN></P></TD>
    <TD 
    style="PADDING-RIGHT: 0.75pt; PADDING-LEFT: 0.75pt; PADDING-BOTTOM: 0.75pt; PADDING-TOP: 0.75pt">
      <P class=MsoNormal style="TEXT-ALIGN: center" align=center><SPAN 
      lang=EN-US style="FONT-SIZE: 24pt">Introduction to Automata Theory, 
      Languages, and Computation</SPAN><SPAN lang=EN-US> 
  </SPAN></P></TD></TR></TBODY></TABLE></DIV>
<H2 style="TEXT-ALIGN: center" align=center><A name=top></A><SPAN 
lang=EN-US>Solutions for Chapter 10</SPAN></H2>
<P class=MsoNormal><SPAN lang=EN-US>Revised 6/30/01. </SPAN></P>
<P><SPAN lang=EN-US><SPAN style="mso-spacerun: yes"></SPAN></SPAN>&nbsp;</P>
<H2><A name=sol101></A><SPAN lang=EN-US>Solutions for Section 10.1</SPAN></H2>
<H3><SPAN lang=EN-US>Exercise 10.1.1(a)</SPAN></H3>
<P class=MsoNormal><SPAN lang=EN-US>The MWST would then be the line from 1 to 2 
to 3 to 4. </SPAN></P>
<H3><SPAN lang=EN-US>Exercise 10.1.3</SPAN></H3>
<P class=MsoNormal><SPAN lang=EN-US>For every problem <I>P</I> in <B>NP</B> 
there would be some polynomial <I>p</I> that bounded the running time (and 
therefore the output length) of the reduction from <I>P</I> to the NP-complete 
problem in question. That would imply an algorithm for <I>P</I> that ran in time 
<I>O(p(n) + [p(n)]^{log_2(p(n))})</I>. The first term, <I>p(n)</I>, can be 
neglected. The exponent is <I>k log n</I> for some constant <I>k</I>. Moreover, 
<I>p(n)^k</I> is at most <I>n^k'</I> for some other constant <I>k'</I>. Thus, we 
can say that there would be some constant <I>c</I> such that problem <I>P</I> 
could be solved in time <I>O(n^{c log_2 n})</I>. </SPAN></P>
<H3><SPAN lang=EN-US>Exercise 10.1.5(a)</SPAN></H3>
<P class=MsoNormal><SPAN lang=EN-US>Given <I>(G,A,B)</I>, construct <I>G1</I> 
and <I>G2</I> to be <I>G</I>, with start symbols <I>A</I> and <I>B</I>, 
respectively. Since this transformation is essentially copying, it can be 
performed in linear time, and is therefore surely a polynomial-time reduction. 
</SPAN></P>
<H3><SPAN lang=EN-US>Exercise 10.1.5(c)</SPAN></H3>
<P class=MsoNormal><SPAN lang=EN-US>Absolutely nothing! Part of any 
NP-completeness proof is a part that shows the problem to be in <B>NP</B>. These 
problems are, in fact, undecidable, and therefore surely not in <B>NP</B>. 
</SPAN></P>
<H3><SPAN lang=EN-US>Exercise 10.1.6(b)</SPAN></H3>
<P class=MsoNormal><SPAN lang=EN-US>Test for membership in one language and 
then, if the input is not in the first, test for membership in the second. The 
time taken is no more than the sum of the times taken to recognize each 
language. Since both ar in <B>P</B>, then can each be recognized in polynomial 
time, and the sum of polynomials is a polynomial. Thus, their union is in 
<B>P</B>. </SPAN></P>
<H3><SPAN lang=EN-US>Exercise 10.1.6(c)</SPAN></H3>
<P class=MsoNormal><SPAN lang=EN-US>Let <I>L1</I> and <I>L2</I> be languages in 
<B>P</B>, and suppose we want to recognize their concatenation. Suppose we are 
given an input of length <I>n</I>. For each <I>i</I> between 1 and <I>n-1</I>, 
test whether positions 1 through <I>i</I> holds a string in <I>L1</I> and 
positions <I>i+1</I.>n hold a string in L2. If so, accept; the input is in L1L2. 
If the test fails for all i, reject the input. <o:p></o:p></I></SPAN></P>
<P><I><SPAN lang=EN-US>The running time of this test is at most n times the sum 
of the running times of the recognizers for L1 and L2. Since the latter are both 
polynomials, so is the running time for the TM just described. 
<o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.1.6(f)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>Given a polynomial-time TM M for L, we 
can modify M to accept the complement of L as follows: 
<o:p></o:p></SPAN></I></P>
<OL type=1>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l1 level1 lfo3; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>Make each accepting state of M a nonaccepting state from which 
  there are no moves. Thus, if M accepts, the new TM will halt without 
  accepting. <o:p></o:p></SPAN></I>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l1 level1 lfo3; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>Create a new state q, which is the only accepting state in the new 
  TM. For each state-symbol combination that has no move, hte new TM enters 
  state q, whereupon it accepts and halts. <o:p></o:p></SPAN></I></LI></OL>
<P><I><SPAN 
lang=EN-US><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></SPAN></I></P>
<H2><A name=sol102></A><I><SPAN lang=EN-US>Solutions for Section 
10.2<o:p></o:p></SPAN></I></H2>
<H3><I><SPAN lang=EN-US>Exercise 10.2.1(a)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>Choosing x = y = z = 1 makes the 
expression satisfiable. Thus, the expression is in SAT. 
<o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.2.2(a)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>There are actually only three distinct 
Hamilton circuits, once we account for the differences in direction and 
differences in starting point. These three circuits are (1,2,3,4), (1,3,2,4), 
and (1,3,4,2). We can express the existence of one of these three circuits 
(using the simplified notation of Section 10.3) by: x12x23x34x14 + x13x23x24x14 
+ x13x34x24x12. <o:p></o:p></SPAN></I></P>
<H2><A name=sol103></A><I><SPAN lang=EN-US>Solutions for Section 
10.3<o:p></o:p></SPAN></I></H2>
<H3><I><SPAN lang=EN-US>Exercise 10.3.1(a)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>In what follows, [-x] stands for x-bar, 
the complement of x. We'll begin by using the construction to put it into CNF. 
xy is already the product of clauses (x)(y), and [-x]z is the product of clauses 
([-x])(z). When we use the OR construction to combine these, we get 
(x+u)(y+u)([-x]+[-u])(z+[-u]). <o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>Now, to put this expression into 3-CNF, we have only to 
expand the four clauses, each of which has only two literals, by introducing 
four new variables and doubling the number of clauses. The result: 
(x+u+v1)(x+u+[-v1])(y+u+v2)(y+u+[-v2])([-x]+[-u]+v3)([-x]+[-u]+[-v3])(z+[-u]+v4)(z+[-u]+[-v4]). 
<o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.3.3(a)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>It is satisfiable. Let any two variables 
be assigned TRUE, say x1 and x2, and let the other two variables be assigned 
FALSE. Then in any set of three variables, there must be at least one true and 
at least one false. Thus, none of the clauses can be false. 
<o:p></o:p></SPAN></I></P>
<P><I><SPAN 
lang=EN-US><![if !supportEmptyParas]><![endif]>&nbsp;<o:p></o:p></SPAN></I></P>
<H2><A name=sol104></A><I><SPAN lang=EN-US>Solutions for Section 
10.4<o:p></o:p></SPAN></I></H2>
<H3><I><SPAN lang=EN-US>Exercise 10.4.1<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>For part (a): There are triangles 
(3-cliques), such as {1,2,3}. However, there is no 4-clique, since there are 
only 4 nodes, and one edge is missing. Thus k = 3 is the answer. 
<o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>For part (b): All pairs of nodes must have an edge 
between them, and the number of pairs of k nodes is k choose 2, or k(k-1)/2. 
<o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>For part (c): We reduce NC to CLIQUE as follows. Suppose 
we are given an instance (G,k) of NC. Construct the instance (G',n-k) of CLIQUE, 
where n is the total number of nodes of G, and G' is G with the set of edges 
complemented; that is, G' has edge (u,v) if and only if G does not have that 
edge. <o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>We must show that G has a node cover of size k if and 
only if G' has a clique of size n-k. First, let C be a node cover of G of size 
k. We claim that C', the complement of the nodes in C, is a clique in G' of size 
n-k. Surely C' is of size n-k. Suppose it is not a clique. Then there is a pair 
of nodes (u,v) that do not have an edge in G'. Thus this edge is in G. But 
neither u nor v is in C, contradicting the assumption that is is a node cover. 
<o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>Conversely, if C' is a clique of size n-k in G', then we 
claim that C the complement of C', is a node cover of size k in G. The argument 
is similar: if (u,v) is an edge of G not covered by C, then both u and v are in 
C', but the edge (u,v) is not in G', contradicting the assumption that C' is a 
clique. <o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.4.2<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>For each clause, we add one node, and 
connect it so that it can only be colored in one of the n+1 available colors if 
the clause is made true. Suppose the clause consists of literals with variables 
xi, xj, and xk, possibly negated. The node for the clause is connected to: 
<o:p></o:p></SPAN></I></P>
<OL type=1>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l2 level1 lfo6; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>xm for all m = 0, 1,..., n, except for i, j, and k. Thus, the only 
  possible colors for the nodes are the ones used for its literals. 
  <o:p></o:p></SPAN></I>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l2 level1 lfo6; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>If the literal with xi is positive (not negated), connect the node 
  for the clause to the node for xI. If the literal is negated, connect the node 
  for the clause to the node for xi-bar. <o:p></o:p></SPAN></I>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l2 level1 lfo6; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>Connect to nodes for xj and xk, analogously. 
  <o:p></o:p></SPAN></I></LI></OL>
<P><I><SPAN lang=EN-US>Now, if at least one of the literals of the clause is 
made true by the assignment where the color c0 corresponds to truth, then that 
literal will not be colored with the color for its variable, and we can use that 
color for the clause's node. However, if the truth assignment makes all three 
literals false, then the clause's node is connected to nodes of all n+1 colors, 
and we cannot complete the coloring. Thus, coloring the complete graph with n+1 
colors is possible if and only if there is a satisfying truth assignment for the 
3-CNF expression. <o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.4.3(a)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>Yes; a Hamilton circuit can be found by 
going around the inner circle, say from 11 to 20, clockwise, then to 10, around 
the outer circle counterclockwise, to 1, and then back to 11. 
<o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.4.4(f)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>Let (G,k) be an instance of the clique 
problem, and suppose G has n nodes. We produce an instance of the half-clique 
problem, as follows: <o:p></o:p></SPAN></I></P>
<OL type=1>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo9; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>If k = n/2, just produce G. Note that G has a half-clique if and 
  only if it has a clique of size k. in this case. <o:p></o:p></SPAN></I>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo9; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>If k &gt; n/2, add 2k - n isolated nodes (nodes with no incident 
  edges). The resulting graph has a half-clique (whose size must be (n + 
  (2k-n))/2 = 2k, if and only if G has a clique of size k. 
<o:p></o:p></SPAN></I>
  <LI class=MsoNormal 
  style="mso-margin-top-alt: auto; mso-margin-bottom-alt: auto; mso-list: l0 level1 lfo9; tab-stops: list 36.0pt"><I><SPAN 
  lang=EN-US>If k &lt; n/2, add n - 2k nodes, and connect them in all possible 
  ways to each other and to the original nodes of G. The new graph thus has 
  2(n-k) nodes. The new nodes, plus a clique of size k in G form a clique of 
  size (n-2k) + k = n-k, which is half the number of nodes in the new graph. 
  Conversely, if the new graph has a half-clique, then it must include at least 
  (n-k) - (n-2k) = k nodes of the graph G, implying that G has a clique of size 
  k. <o:p></o:p></SPAN></I></LI></OL>
<P><I><SPAN lang=EN-US>These steps complete a reduction of CLIQUE to 
HALF-CLIQUE. It is evidently performable in polynomial time, since the number of 
new nodes and edges is at most the square of the original number of nodes, and 
the rules for adding nodes and edges are simple to carry out. 
<o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.4.5(a)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>Following the hint, pick any node x in 
graph G. Add a duplicate node y that is adjacent to exactly those nodes to which 
x is adjacent. Then, add new nodes u and v that are adjacent to x and y, 
respectively, and no other nodes. Call the resulting graph G'. 
<o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>We claim G' has a Hamilton path if and only if G has a 
Hamilton circuit. If G has a Hamilton circuit, the following is a Hamilton path 
in G': start at u, go to x, follow the Hamilton circuit, but end at y instead of 
x, and then go to v. <o:p></o:p></SPAN></I></P>
<P><I><SPAN lang=EN-US>If G' has a Hamilton path, it must start at u and end at 
v, or vice-versa (which is really the same path. Moreover, the path must go from 
x</I.>y, visiting all the nodes of G as it does. Thus, if we replace y by x 
along this path, we get a Hamilton circuit in G. <o:p></o:p></SPAN></I></P>
<H3><I><SPAN lang=EN-US>Exercise 10.4.5(c)<o:p></o:p></SPAN></I></H3>
<P class=MsoNormal><I><SPAN lang=EN-US>A spanning tree with two leaf nodes is a 
Hamilton path. Thus, the Hamilton path problem reduces to the question of 
whether a graph has a spanning tree with only 2 leaf nodes. Surely, then, 
Hamilton path reduces to the more general problem stated in the question, where 
the number of leaf nodes is a parameter of the problem. 
<o:p></o:p></SPAN></I></P>
<P><SPAN lang=EN-US><A 
href="http://learn.tsinghua.edu.cn/homepage/S01122/index.htm">Return to 
Home</A><I><o:p></o:p></I></SPAN></P></DIV></BODY></HTML>
